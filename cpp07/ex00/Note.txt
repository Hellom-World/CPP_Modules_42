Start with a few functions - Começe com algumas funcoes

Tarefas:
| |Implementar os seguintes templates de funcoes:
    | |swap - Troca os valores de 2 argumentos fornecidos e nao retorna nada
    | |min - Compara os 2 valores passados como argumento e retorna o menor.
        Se ambos forem iguais, retorne o segundo.
    | |max - Compara os 2 valores passados como argumento e retorna o maior.
        Se ambos forem iguais, retorne o segundo
| |Garantir que essas funcoes possam ser chamadas com qualquer tipo de argumento
    | |Os argumentos passados devem ser do mesmo tipo
        | |Os tipos devem suportar operadores de comparacao
| |Os templates devem ser definidos nos arquivos de cabecalho


Obs: Aqui usaremos templates de funcao que consiste em permitir que voce crie uma funcao generica que funcione com diferentes tipos de dados, um exemplo simple:

template <typename T>
T max(T a, T b) {
    return (a > b) ? a : b;
}
Nesse exemplo, a função max retorna o maior entre a e b, mas o tipo de dado de a e b é genérico, ou seja, a função pode ser chamada com inteiros, floats, strings, etc.


-------------------------------------------------------------------------------------------------
Nota interessante

#include <iostream>
#include <algorithm>  // Para std::swap

// Função personalizada de swap
void swap(int& a, int& b) {
    std::cout << "Custom swap called!" << std::endl;
    int temp = a;
    a = b;
    b = temp;
}

int main() {
    int x = 1, y = 2;

    // Chama a função de swap personalizada
    swap(x, y);  // Saída: Custom swap called!

    // Chama std::swap do escopo global (ignorando a personalizada)
    ::swap(x, y);  // Erro: std::swap não foi encontrado (se não houver um using std::swap)

    // Chama std::swap usando o namespace std explicitamente
    std::swap(x, y);  // Funciona: std::swap da biblioteca padrão
}
