BIBLIOTECA DE MODELSO PADRAO C++ (STL)

A c++ standard template libray (STL) é uma colecao de arquivos de cabecalho que fornecem varias estruturas de dados, algoritmos e funcoes para simplificar sua experiencia de codificacao c++.
O objetivo principal da STL é economizar tempo e aumentar a eficiencia, fornecendo um conjunto pronto para uso de ferramentas uteis. Os recursos mais comumente usados da STL podem ser divididos em 3 categorias principais:

	1. Conteineres
	2. Algoritmos
	3. Iteradores


RECIPIENTES

Conteiners sao as estruturas de dados usadas para armazenamento e manipulacao de dados em c++. Eles sao classificados em quatro tipos:
	
	1. Sequencia containers
	2. Associative containers
	3. Unordered associative containers
	4. container adptors


Conteiners de sequencia (sequence containers):

Sao estruturas de dados lineares de armazenam alementos de forma sequencial. Exemplos incluem:

	std::vector - Uma matriz dinamica que cresce e diminui em tempo de execucao
	std::vector<int> my_vector

	std::list - Uma lista duplamente encadeada
	std::list<int> my_list;

	std::deque - Uma fina de duas extremidades que permite insercao e exclusao em ambas as extremidades
	std::deque<int> my_deque;


Conteineres associativos (Associative Conteiners)

Esse containers armazenam dados de forma ordenada com chaves exclusivas. Exemplos incluem:

	std::set<int> - Uma colecao de elementos exclusivos classificados por chaves
	std::set<int> my_set;

	std::map - Uma colecao de pares chave-valor classificados por chaves.
	std::map<std::string, int> my_map;

Conteiners associativos nao ordenadors (Unordered associative conteiners):

Esses conteinres armazenam dados de forma nao ordenada usando tabelas hash. Exemplos incluem:

	std::unordered_set - Uma colecao de elementos unicos sem uma ordem especific
	std::unordered_set<int> my_unordered_set;

	std::unordered_map - Uma colecao de pares chave-valor sem ordem especifica
        std::unordered_map<std::string, int> my_unordered_map;

Adpatadores de conteiners (Conteiners adaptors)

Sao conteiners baseados em outros containers existentes. Exemplos incluem:
	
	std::stack - Uma estrutura de dados LIFO baseada em deque ou lista
	std::stack<int> my_stack;

	std::queue - Uma estutura de dadoos FIFO baseada em deque ou lista
	std::queue<int> my_queue;

	std::priority_queue - Uma fila classificada com base em vector ou deque
	std::priority_queue<int> mt_priority_queue;


ALGORITIMOS

O STL fornece varios algoritmos genericos que podem ser usados para exevutar varias operacoes nos dados armazenados em conteiners. Eles sao divididos em cinco categorias:
	1. Algoritmos de sequencia nao modificadores
	2. Algoritmos de sequencia modificadores
	3. Algoritmos de classificacao
	4. Algoritmos de intervalo classificado
	5. Algoritmos numericos

Alguns exemplos incluem: std::find, std::replace, std::sort, e std::binary_search

Para classifica um vetor voce pode usar, por exemplo:

	std::vector<int> my_vec = {4, 2, 5, 1, 3};
	std::sort(my_vec.begin(), my_vec.end());

ITERADORES

Iteradores sao um conceito fundametnal no STL, pois fornecem uma maneira unificada de acessar elementos em conteinres. Iteradores podem ser pensados como uma forma avancada de ponteiros.

Cada conteiner tem seu proprio tipo de iterador, que pode ser usado para percorrer elementos e modificar valores. As operacoes de iterdor mais comuns sao begin() e end() para obter iteradores apontando para o primeiro e um apos o ultimo elemento de um conteiner, respectivamente.

Por exemplo, para iterar por um vetor e imprimir seus elementos voce pode usar o seguinte codigo

	std::vector<int> my_vec = {1, 2, 3, 4, 5};
	for(auto it = my_vec.begin(); it != my_vec.end(); ++it) {
    		std::cout << *it << " ";
	}

Esta é apenas uma breve visao geral da c++ Standard Template Library. Há muitos outros recursos e funcoes disponiveis na STL, e familiarizar-se com eles é crucial para uma programacao em c++ eficiente.
